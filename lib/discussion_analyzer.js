// Generated by CoffeeScript 1.7.1
(function() {
  var DiscussionAnalyzer, DiscussionFetcher, async, childProcess, request;

  request = require("request");

  async = require("async");

  childProcess = require("child_process");

  DiscussionFetcher = require("./discussion_fetcher");

  DiscussionAnalyzer = (function() {
    function DiscussionAnalyzer() {
      this._filtered = [];
      this._config = {};
    }

    DiscussionAnalyzer.prototype.start = function(config, cb) {
      var fetcher, opts;
      this._config = config;
      if (!this._config.tender.siteName || !this._config.tender.apiKey) {
        throw new Error("You need to supply Tender credentials!");
      }
      opts = {
        site: this._config.tender.siteName,
        apiKey: this._config.tender.apiKey,
        state: this._config.state
      };
      fetcher = new DiscussionFetcher(opts);
      return fetcher.fetch((function(_this) {
        return function(err, discussions) {
          if (err) {
            throw err;
          }
          return _this._filterDiscussions(discussions, function(err) {
            if (err) {
              throw err;
            }
            return _this._fetchStatsForDiscussions(_this._filtered, cb);
          });
        };
      })(this));
    };

    DiscussionAnalyzer.prototype._filterDiscussions = function(discussions, cb) {
      var q;
      if (discussions.length === 0) {
        return cb();
      }
      q = async.queue(this._filter.bind(this), 1);
      q.drain = cb;
      return q.push(discussions);
    };

    DiscussionAnalyzer.prototype._filter = function(discussion, cb) {
      var hoursAgo, now, result, thenTime;
      result = [];
      if (this._config.hoursAgo) {
        now = +(new Date);
        hoursAgo = +new Date(now - (this._config.hoursAgo * 60 * 60 * 1000));
        thenTime = +new Date(discussion.created_at);
        if (thenTime < hoursAgo) {
          return cb();
        }
      }
      return this._fetchComments(discussion.href, (function(_this) {
        return function(err, result) {
          var comment, hasComment, match, _i, _len, _ref;
          if (err) {
            return cb(err);
          }
          hasComment = false;
          _ref = result.comments;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            comment = _ref[_i];
            match = comment.internal === _this._config.formData.internal;
            match = match && comment.author_email === _this._config.formData.authorEmail;
            match = match && /^\#Script generated/.test(comment.body);
            if (match) {
              hasComment = true;
              break;
            }
          }
          if (!hasComment) {
            _this._filtered.push(discussion);
          }
          return cb();
        };
      })(this));
    };

    DiscussionAnalyzer.prototype._fetchStatsForDiscussions = function(discussions, cb) {
      var d, index, obj, q, _i, _len, _results;
      console.log("Need to update " + discussions.length + " discussions");
      if (discussions.length === 0) {
        return cb();
      }
      q = async.queue(this._fetchStats.bind(this), 1);
      q.drain = cb;
      index = 1;
      _results = [];
      for (_i = 0, _len = discussions.length; _i < _len; _i++) {
        d = discussions[_i];
        obj = {
          index: index++,
          total: discussions.length,
          discussion: d
        };
        _results.push(q.push(obj));
      }
      return _results;
    };

    DiscussionAnalyzer.prototype._fetchStats = function(obj, cb) {
      var discussion, index, total;
      discussion = obj.discussion;
      index = obj.index;
      total = obj.total;
      return this._config.fn(discussion, (function(_this) {
        return function(err, data) {
          var formData, msg, opts;
          if (err) {
            throw err;
          }
          if (data === null) {
            msg = "" + index + " / " + total + ": Author of " + discussion.html_href;
            msg += " is not a user";
            console.log(msg);
            return cb();
          }
          formData = JSON.parse(JSON.stringify(_this._config.formData));
          formData.body = _this._fillPlaceholders(formData.body, data);
          formData.body = "#Script generated " + formData.body;
          opts = {
            url: discussion.comments_href,
            form: formData,
            headers: {
              "X-Tender-Auth": _this._config.tender.apiKey,
              "Accept": "application/vnd.tender-v1+json",
              "Content-Type": "application/json"
            }
          };
          return request.post(opts, function(err, resp, body) {
            if (err) {
              throw err;
            }
            msg = "" + index + " / " + total + ": Added comment for";
            msg += " " + discussion.html_href;
            console.log(msg);
            return cb();
          });
        };
      })(this));
    };

    DiscussionAnalyzer.prototype._fetchComments = function(href, cb) {
      var cmd;
      cmd = ["curl"];
      cmd.push("-H \"Accept: application/vnd.tender-v1+json\"");
      cmd.push("-H \"X-Tender-Auth: " + this._config.tender.apiKey + "\"");
      cmd.push("-H \"Content-Type: application/json\"");
      cmd = cmd.join(" ");
      cmd += " " + href;
      return childProcess.exec(cmd, function(err, stdout, stderr) {
        var e, parsed;
        parsed = null;
        try {
          parsed = JSON.parse(stdout);
        } catch (_error) {
          e = _error;
          return cb(e);
        }
        return cb(err, parsed);
      });
    };

    DiscussionAnalyzer.prototype._fillPlaceholders = function(body, dataToReplace) {
      var key, regex, val;
      for (key in dataToReplace) {
        val = dataToReplace[key];
        regex = new RegExp("\{" + key + "\}");
        body = body.replace(regex, val);
      }
      return body;
    };

    return DiscussionAnalyzer;

  })();

  module.exports = DiscussionAnalyzer;

}).call(this);
